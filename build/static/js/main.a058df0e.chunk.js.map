{"version":3,"sources":["components/Editor.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","language","title","value","onChange","useState","open","setOpen","className","onClick","prevOpen","TransitEnterexit","Launch","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","App","html","setHtml","css","setCss","js","setjs","srcDoc","setSrcDoc","useEffect","timeout","setTimeout","clearTimeout","sandbox","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAmCeA,EA3BF,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,SAASC,EAAwB,EAAxBA,MAAMC,EAAkB,EAAlBA,MAAMC,EAAY,EAAZA,SAAY,EACxBC,oBAAS,GADe,mBACtCC,EADsC,KACjCC,EADiC,KAK5C,OACA,sBAAKC,UAAW,4CAAhB,UACI,sBAAKA,UAAU,eAAf,UACKN,EACD,wBAAQO,QAAS,kBAAIF,GAAQ,SAACG,GAAD,OAAaA,MAAWF,UAAU,yBAA/D,SACKF,EAAK,cAACK,EAAA,EAAD,IAAoB,cAACC,EAAA,EAAD,SAGlC,cAAC,aAAD,CACAC,eAZJ,SAAsBC,EAAOC,EAAKZ,GAC9BC,EAASD,IAYTA,MAAOA,EACPK,UAAU,sBAAsBQ,QAAS,CACrCC,cAAa,EACbC,MAAK,EACLC,KAAKlB,EACLmB,MAAM,WACNC,aAAY,SCSTC,EAlCL,WAAK,IAAD,EACQjB,mBAAS,IADjB,mBACNkB,EADM,KACDC,EADC,OAEMnB,mBAAS,IAFf,mBAENoB,EAFM,KAEFC,EAFE,OAGIrB,mBAAS,IAHb,mBAGNsB,EAHM,KAGHC,EAHG,OAIYvB,mBAAS,IAJrB,mBAINwB,EAJM,KAICC,EAJD,KAqBZ,OAfAC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBH,EAAU,2BAAD,OAEHP,EAFG,+BAGFE,EAHE,iCAIDE,EAJC,oCAOT,KACF,OAAO,WACLO,aAAaF,MAEf,CAACT,EAAKE,EAAIE,IAGV,qCACA,sBAAKnB,UAAU,kBAAf,UACE,cAAC,EAAD,CAAQN,MAAM,OAAOD,SAAS,MAAME,MAAOoB,EAAMnB,SAAUoB,IAC3D,cAAC,EAAD,CAAQtB,MAAM,MAAMD,SAAS,MAAME,MAAOsB,EAAKrB,SAAUsB,IACzD,cAAC,EAAD,CAAQxB,MAAM,KAAKD,SAAS,aAAaE,MAAOwB,EAAIvB,SAAUwB,OAEhE,qBAAKpB,UAAU,QAAf,SACE,wBAAQqB,OAAQA,EAAQ3B,MAAM,SAASiC,QAAQ,gBAAgBC,MAAM,OAAOC,OAAO,eCrB1EC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a058df0e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/css/css\";\nimport \"codemirror/mode/javascript/javascript\";\nimport {Controlled as ControlledEditor} from \"react-codemirror2\";\nimport {Launch,TransitEnterexit} from \"@material-ui/icons\";\nconst Editor=({language,title,value,onChange})=>{\n    const[open,setOpen]=useState(true);\n    function handleChange(editor,data,value){\n        onChange(value);\n    }\n    return (\n    <div className={'editor-container ${open ?\"\": \"collapsed\"}'}>\n        <div className=\"editor-title\">\n            {title}\n            <button onClick={()=>setOpen((prevOpen)=>!prevOpen)} className=\"expand-collapse-button\">\n                {open?<TransitEnterexit/>:<Launch/>}\n            </button>\n        </div>\n        <ControlledEditor \n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\" options={{\n            lineWrapping:true,\n            lint:true,\n            mode:language,\n            theme:\"material\",\n            lineNumbers:true,\n\n        }} />\n    </div>\n    );\n};\nexport default Editor;","//import React from 'react';\nimport React, { useEffect,useState } from \"react\";\nimport Editor from './components/Editor';\n\nconst App=()=>{\n  const[html,setHtml]=useState(\"\");\n  const[css,setCss]=useState(\"\");\n  const[js,setjs]=useState(\"\");\n  const[srcDoc,setSrcDoc]=useState(\"\");\n\n  useEffect(()=>{\n    const timeout=setTimeout(()=>{\n      setSrcDoc(`\n    <html>\n    <body>${html}</body>\n    <style>${css}</style>\n    <script>${js}</script>\n    </html>\n    `);\n    },250);\n    return ()=>{\n      clearTimeout(timeout);\n    };\n  },[html,css,js]);\n\n  return(\n    <>\n    <div className=\"panel top-panel\"> \n      <Editor title=\"HTML\" language=\"xml\" value={html} onChange={setHtml}/>\n      <Editor title=\"CSS\" language=\"css\" value={css} onChange={setCss}/>    \n      <Editor title=\"JS\" language=\"javascript\" value={js} onChange={setjs}/>        \n    </div>\n    <div className=\"panel\">\n      <iframe srcDoc={srcDoc} title=\"output\" sandbox=\"allow-scripts\" width=\"100%\" height=\"100%\"/>\n    </div>\n    </>\n  );\n};\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}